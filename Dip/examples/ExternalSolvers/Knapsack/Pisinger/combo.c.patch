55c55
< #include <malloc.h>
---
> #include <memory.h>
105a106
>    int    i;/*MVG*/
209c210
< static void error(char *str, ...)
---
> static void error(const char *str, ...)
234,235c235,236
< 
< #define _POSIX_SOURCE         /* to read <unistd.h> on digital UNIX */
---
> #ifndef _MSC_VER
> /*#define _POSIX_SOURCE*/         /* to read <unistd.h> on digital UNIX */
246c247
<   *time = t1 * 1000;
---
>   *time = (long)(t1 * 1000);
247a249
> #endif
267c269
<   p = malloc(size);
---
>   p = malloc((size_t)(size));
279c281
<   interval *pos;
---
>   interval *pos = NULL;
311,313d312
<   long t;
<   char *txt;
< 
337d335
<   long t;
342c340
<   if (a->fullsol) {
---
>   if (a->fullsol) {     
350,351c348,357
<   for (i = a->fitem, m = a->b; i != m; i++) i->x = 1;
<   for (i = a->b, m = a->litem+1; i != m; i++) i->x = 0;
---
>   for (i = a->fitem, m = a->b; i != m; i++) {
>      /*printf("set x=1 for %p p:%ld w:%ld\n",
>      i, i->p, i->w);*/
>      i->x = 1;
>   }
>   for (i = a->b, m = a->litem+1; i != m; i++){
>      /*printf("set x=0 for %p p:%ld w:%ld\n",
>      	    i, i->p, i->w);*/
>      i->x = 0;
>   }
419c425
<   register item *i, *j, *m;
---
>   register item *i, *j, *m = NULL;
470c476
<   register item *i, *j, *m;
---
>   register item *i, *j, *m = NULL;
505c511
<   register item *i, *j, *m;
---
>   register item *i, *j, *m = NULL;
542c548
<   register item *i, *j, *m;
---
>   register item *i, *j, *m = NULL;
586,587c592,593
<   register state *j, *m;
<   register stype pp, ww;
---
>   /*register state *j, *m;*/
>   /*register stype pp, ww;*/
722c728,729
<   *sur = suropt; *u = uopt;
---
>   *sur = suropt; 
>   *u   = (stype)(uopt);
757c764
<   z1 = ps + combo(k, l, csur, a->z-ps, 0, TRUE, TRUE);
---
>   z1 = ps + combo(k, l, csur, a->z-ps, (stype)0, TRUE, TRUE);
784a792
> #ifndef _MSC_VER
785a794
> #endif
787a797
> #ifndef _MSC_VER
788a799
> #endif
791c802
<   f = palloc(n, sizeof(item));
---
>   f = palloc((long)n, sizeof(item));
814c825
<       solvesur(a, f, l, minsur, 0, b1+1, &u); /* min card constr */
---
>        solvesur(a, f, l, minsur, (stype)0, b1+1, &u); /* min card constr */
819c830
<       solvesur(a, f, l, 0, maxsur, b1, &u); /* max card constr */
---
>        solvesur(a, f, l, (stype)0, maxsur, b1, &u); /* max card constr */
823,824c834,835
<       solvesur(a, f, l, minsur, 0, b1+1, &u); 
<       solvesur(a, f, l, 0, maxsur, b1, &u); 
---
>        solvesur(a, f, l, minsur, (stype)0, b1+1, &u); 
>        solvesur(a, f, l, (stype)0, maxsur, b1, &u); 
828,829c839,840
<       solvesur(a, f, l, 0, maxsur, b1, &u); 
<       solvesur(a, f, l, minsur, 0, b1+1, &u); 
---
>        solvesur(a, f, l, (stype)0, maxsur, b1, &u); 
>        solvesur(a, f, l, minsur, (stype)0, b1+1, &u); 
835a847
> #ifndef _MSC_VER
836a849
> #endif
925c938
< 	partsort(a, f, l, 0, 0, SORTALL); a->fsort = f;
---
>          partsort(a, f, l, (stype)0, (stype)0, SORTALL); a->fsort = f;
940c953
< 	partsort(a, f, l, 0, 0, SORTALL); a->lsort = l;
---
>          partsort(a, f, l, (stype)0, (stype)0, SORTALL); a->lsort = l;
1005c1018
<   d->set1 = palloc(sizeof(state), MAXSTATES);
---
>   d->set1 = palloc(sizeof(state), (long)MAXSTATES);
1023c1036
<   a->ffull = palloc(DIFF(a->fitem,a->litem), sizeof(item));
---
>   a->ffull = palloc((long)DIFF(a->fitem,a->litem), sizeof(item));
1207c1220
<   a->dantzig = psum + (r * (prod) i->p) / i->w;
---
>   a->dantzig = psum + (stype)((r * (prod) i->p) / i->w);
1233c1246
<   inttab   = palloc(sizeof(interval), SORTSTACK);
---
>   inttab   = palloc(sizeof(interval), (long)SORTSTACK);
1247c1260
<   partsort(&a, a.fitem, a.litem, 0, a.c, PARTITION);
---
>   partsort(&a, a.fitem, a.litem, (stype)0, a.c, PARTITION);
